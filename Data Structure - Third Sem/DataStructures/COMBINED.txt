#include <istream>

//Same implementation as DynamicArray. We only use PushBack and PopBack from it.

template<typename T>
class ArrayStack 
{

private:
	T* data;
	size_t currentSize;
	size_t capacity;

	void copyFrom(const ArrayStack<T>&);
	void free();
	void resize(size_t);

public:
	ArrayStack();
	ArrayStack(const ArrayStack<T>&);
	ArrayStack<T>& operator=(const ArrayStack<T>&);
	~ArrayStack();


	void push(const T&); 
	void pop(); 
	const T& peek() const;

	size_t size() const;
	size_t isEmpty() const;
};

template<typename T>
ArrayStack<T>::ArrayStack() : currentSize(0), capacity(4)
{
	data = new T[capacity];
}


template<typename T>
ArrayStack<T>::ArrayStack(const ArrayStack<T>& other) 
{
	copyFrom(other);
}

template<typename T>
ArrayStack<T>& ArrayStack<T>::operator=(const ArrayStack<T>& other) 
{

	if (this != &other) 
	{
		free();
		copyFrom(other);
	}
	return *this;
}

template<typename T>
ArrayStack<T>::~ArrayStack() 
{
	free();
}

template<typename T>
void ArrayStack<T>::copyFrom(const ArrayStack<T>& other) 
{
	data = new T[other.capacity];

	for (size_t i = 0; i < other.currentSize; i++)
		data[i] = other.data[i];

	currentSize = other.currentSize;
	capacity = other.capacity;
}

template<typename T>
void ArrayStack<T>::free() 
{
	delete[] data;
}

template<typename T>
void ArrayStack<T>::resize(size_t newCap) 
{

	T* temp = data;
	data = new T[newCap];

	for (size_t i = 0; i < currentSize; i++)
		data[i] = temp[i];

	capacity = newCap;
	delete[] temp;
}



template<typename T>
void ArrayStack<T>::push(const T& newElem) 
{

	if (currentSize >= capacity)
		resize(capacity * 2);

	data[currentSize++] = newElem;
}

template<typename T>
void ArrayStack<T>::pop() 
{
	if (isEmpty())
		throw std::runtime_error("Stack is empty!");

	T el = data[--currentSize];

	if (currentSize * 2 <= capacity && capacity > 1)
		resize(capacity / 2);
}

template<typename T>
const T& ArrayStack<T>::peek() const
{
	if (isEmpty())
		throw std::runtime_error("Stack is empty!");

	return data[currentSize - 1];
}

template<typename T>
size_t ArrayStack<T>::size() const
{
	return currentSize;
}

template<typename T>
size_t ArrayStack<T>::isEmpty() const
{
	return size() == 0;
}


------------------------------------------------------------------------------------------------------------


#ifndef QUEUE_HDR
#define QUEUE_HDR

#include <iostream>
using namespace std;

template<typename T>
class Queue 
{
private:

	T* data;
	size_t capacity;
	size_t count;

	size_t putIter;
	size_t getIter;

	void resize();
	void copyFrom(const Queue<T>& other);
	void free();

public:
	Queue();
	Queue(const Queue<T>& other);
	Queue<T>& operator=(const Queue<T>& other);
	~Queue();

	bool isEmpty() const;
	void enqueue(const T& el);
	void dequeue();
	const T& peek() const;
};

template <typename T>
void Queue<T>::resize() 
{
	size_t newCapacity = capacity * 2;
	size_t currentCapacity = capacity;

	T* temp = new T[newCapacity];

	for (int i = 0; i < currentCapacity; ++i)
	{
		temp[i] = peek();
		dequeue();
	}

	getIter = 0;
	putIter = capacity;

	count = capacity;
	capacity *= 2;

	delete[] data;
	data = temp;
}

template <typename T>
void Queue<T>::copyFrom(const Queue<T>& other) 
{
	data = new T[other.capacity];
	for (int i = other.getIter; i != other.putIter; (i+=1)%=other.capacity)
		data[i] = other.data[i];
	
	count = other.count;
	capacity = other.capacity;

	putIter = other.putIter;
	getIter = other.getIter;
}

template <typename  T>
void Queue<T>::free() 
{
	delete[] data;
	count = capacity = 0;
}

template <typename T>
Queue<T>::Queue() 
{
	const size_t DEFAULT_CAPACITY = 4;

	data = new T[DEFAULT_CAPACITY];
	capacity = DEFAULT_CAPACITY;
	count = 0;
	putIter = 0;
	getIter = 0;
}

template <typename T>
Queue<T>::Queue(const Queue<T>& other) 
{
	copyFrom(other);
}

template <typename T>
Queue<T>& Queue<T>::operator=(const Queue<T>& other) 
{
	if (this != &other) 
	{
		free();
		copyFrom(other);
	}
	return *this;
}

template <typename T>
Queue<T>::~Queue() 
{
	free();
}

template <typename T>
bool Queue<T>::isEmpty() const 
{
	return count == 0;
}

template <typename T>
void Queue<T>::enqueue(const T& el) 
{
	if (count == capacity)
		resize();

	data[putIter] = el;

	(++putIter) %= capacity;
	count++;
}

template <typename T>
void Queue<T>::dequeue() 
{
	if (count == 0)
		throw std::runtime_error("Queue is empty!");
	count--;
	(++getIter) %= capacity;
}

template <typename T>
const T& Queue<T>::peek() const
{
	if (isEmpty())
		throw std::runtime_error("Queue is empty!");
	return data[getIter];
}

#endif // !QUEUE_HDR

------------------------------------------------------------------------------------------------------------


#pragma once
#include <iostream>

//Implementation without iterators (for now)
template <typename T> 
class DoublyLinkedList 
{
	size_t count = 0;

	struct Node
	{
		Node(T data) : data(data) {}
		T data;
		Node* next = nullptr;
		Node* prev = nullptr;
	};

	Node* head = nullptr;
	Node* tail = nullptr;
	void copyFrom(const DoublyLinkedList& other);
	void free();

public:
	DoublyLinkedList();
	DoublyLinkedList(const DoublyLinkedList<T>& other);
	DoublyLinkedList<T>& operator=(const DoublyLinkedList<T>& other);
	~DoublyLinkedList();

	void pushBack(const T& el); //O(1)
	void pushFront(const T& el); //O(1)

	void popBack(); // O(1)
	void popFront(); // O(1)

	const T& front() const;
	const T& back() const;

	void print() const;
	size_t getSize() const;

	bool isEmpty() const;
};

template <typename T>
DoublyLinkedList<T>::DoublyLinkedList() : head(nullptr), tail(nullptr), count(0)
{}

template <typename T>
bool DoublyLinkedList<T>::isEmpty() const
{
	return head == nullptr && tail == nullptr;
}

template <typename T>
void DoublyLinkedList<T>::pushBack(const T& el)
{
	Node* added = new Node(el);
	count++;
	if (isEmpty())
		head = tail = added;
	else
	{
		tail->next = added;
		added->prev = tail;
		tail = added;
	}
}
template <typename T>
void DoublyLinkedList<T>::pushFront(const T& el)
{
	Node* added = new Node(el);
	if (isEmpty())
	{
		head = tail = added;
	}
	else
	{
		added->next = head;
		head->prev = added;
		head = added;
	}
	count++;
}

template<typename T>
void DoublyLinkedList<T>::popBack()
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");
	
	if (head == tail)
	{
		delete head;
		head = tail = nullptr;
	}
	else
	{
		tail->prev->next = nullptr;

		Node* toDelete = tail;
		tail = tail->prev;

		delete toDelete;

		count--;
	}
}

template<typename T>
void DoublyLinkedList<T>::popFront()
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");

	
	if (head == tail)
	{
		delete head;
		head = tail = nullptr;
		count--;
	}
	else
	{
		head->next->prev = nullptr;

		Node* toDelete = head;
		head = head->next;
		
		delete toDelete;

		count--;
	}
}

template<typename T>
const T& DoublyLinkedList<T>::front() const
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");

	return head->data;
}

template<typename T>
const T& DoublyLinkedList<T>::back() const
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");

	return tail->data;
}

template<typename T>
void DoublyLinkedList<T>::print() const
{
	Node* iter = head;
	while (iter != nullptr)
	{
		std::cout << iter->data;
		if (iter != tail)
			std::cout << "<->";
		iter = iter->next;
	}
	std::cout << std::endl;
}
template<typename T>
size_t DoublyLinkedList<T>::getSize() const
{
	return count;
}


template <typename T>
DoublyLinkedList<T>::DoublyLinkedList(const DoublyLinkedList<T>& other) : head(nullptr), tail(nullptr)
{
	copyFrom(other);
}

template <typename T>
DoublyLinkedList<T>& DoublyLinkedList<T>::operator=(const DoublyLinkedList<T>& other)
{
	if (this != &other)
	{
		free();
		copyFrom(other);
	}
	return *this;
}

template <typename T>
DoublyLinkedList<T>::~DoublyLinkedList()
{
	free();
}

template <typename T>
void DoublyLinkedList<T>::copyFrom(const DoublyLinkedList<T>& other)
{
	Node* otherIter = other.head;
	while (otherIter != nullptr)
	{
		pushBack(otherIter->data);
		otherIter = otherIter->next;
	}
}

template<typename T>
void DoublyLinkedList<T>::free()
{
	Node* iter = head;
	while (iter != nullptr)
	{
		Node* toDelete = iter;
		iter = iter->next;
		delete toDelete;
	}
	
	head = tail = nullptr;
}


------------------------------------------------------------------------------------------------------------


#pragma once
#include <iostream>

template <typename T> 
class DoublyLinkedList 
{
	size_t count = 0;

	struct Node
	{
		Node(T data) : data(data) {}
		T data;
		Node* next = nullptr;
		Node* prev = nullptr;
	};

	Node* head = nullptr;
	Node* tail = nullptr;
	void copyFrom(const DoublyLinkedList& other);
	void free();

public:
	DoublyLinkedList();
	DoublyLinkedList(const DoublyLinkedList<T>& other);
	DoublyLinkedList<T>& operator=(const DoublyLinkedList<T>& other);
	~DoublyLinkedList();

	void pushBack(const T& el); //O(1)
	void pushFront(const T& el); //O(1)

	void popBack(); // O(1)
	void popFront(); // O(1)

	const T& front() const;
	const T& back() const;

	void print() const;
	size_t getSize() const;

	bool isEmpty() const;

	class DLinkedIterator;
	DLinkedIterator insertAfter(const T& element, const DLinkedIterator& it);
	DLinkedIterator remove(const DLinkedIterator& it);
	
	class DLinkedIterator
	{
		Node* currentElementPtr;

		friend class DoublyLinkedList;
	public:

		typedef std::random_access_iterator_tag iterator_category;

		DLinkedIterator(Node* currentElementPtr = nullptr) : currentElementPtr(currentElementPtr) {}

		T& operator*()
		{
			return currentElementPtr->data;
		}

		T* operator->()
		{
			return &currentElementPtr->data;
		}

		DLinkedIterator& operator++()
		{
			if(currentElementPtr)
				currentElementPtr = currentElementPtr->next;
			return *this;
		}

		DLinkedIterator operator++(int)
		{
			DLinkedIterator copy(*this);
			++(*this);
			return copy;
		}

		DLinkedIterator& operator--()
		{
			if(currentElementPtr)
				currentElementPtr = currentElementPtr->prev;
			return *this;
		}

		DLinkedIterator operator--(int)
		{
			DLinkedIterator copy(*this);
			--(*this);
			return copy;
		}


		DLinkedIterator& operator+=(int s)
		{
			if (s >= 0)
			{
				while (s--)
					++(*this);
			}
			else
			{
				while (s++)
					--(*this);
			}

			return *this;
		}

		DLinkedIterator& operator-=(int s)
		{
			return *this += (-s);
		}

		DLinkedIterator operator+(int i) const
		{

			DLinkedIterator res(*this);
			return res += i;
		}

		DLinkedIterator operator-(int i) const
		{

			DLinkedIterator res(*this);
			return res -= i;
		}

		int operator-(const DLinkedIterator& rhs) const
		{
			return currentElementPtr - rhs.currentElementPtr;
		}

		bool operator==(const DLinkedIterator& rhs) const { return currentElementPtr == rhs.currentElementPtr; }
		bool operator!=(const DLinkedIterator& rhs) const { return !(rhs == *this); }

	};
	DLinkedIterator begin()
	{
		return DLinkedIterator(head);
	}
	DLinkedIterator end()
	{
		return DLinkedIterator(nullptr);
	}
};

template <typename T>
DoublyLinkedList<T>::DoublyLinkedList() : head(nullptr), tail(nullptr), count(0)
{}

template <typename T>
bool DoublyLinkedList<T>::isEmpty() const
{
	return head == nullptr && tail == nullptr;
}

template <typename T>
void DoublyLinkedList<T>::pushBack(const T& el)
{
	Node* added = new Node(el);
	count++;
	if (isEmpty())
		head = tail = added;
	else
	{
		tail->next = added;
		added->prev = tail;
		tail = added;
	}
}
template <typename T>
void DoublyLinkedList<T>::pushFront(const T& el)
{
	Node* added = new Node(el);
	if (isEmpty())
	{
		head = tail = added;
	}
	else
	{
		added->next = head;
		head->prev = added;
		head = added;
	}
	count++;
}

template<typename T>
void DoublyLinkedList<T>::popBack()
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");
	
	if (head == tail)
	{
		delete head;
		head = tail = nullptr;
	}
	else
	{
		tail->prev->next = nullptr;

		Node* toDelete = tail;
		tail = tail->prev;

		delete toDelete;

		count--;
	}
}

template<typename T>
void DoublyLinkedList<T>::popFront()
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");

	
	if (head == tail)
	{
		delete head;
		head = tail = nullptr;
		count--;
	}
	else
	{
		head->next->prev = nullptr;

		Node* toDelete = head;
		head = head->next;
		
		delete toDelete;

		count--;
	}
}

template<typename T>
const T& DoublyLinkedList<T>::front() const
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");

	return head->data;
}

template<typename T>
const T& DoublyLinkedList<T>::back() const
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");

	return tail->data;
}

template<typename T>
void DoublyLinkedList<T>::print() const
{
	Node* iter = head;
	while (iter != nullptr)
	{
		std::cout << iter->data;
		if (iter != tail)
			std::cout << "<->";
		iter = iter->next;
	}
	std::cout << std::endl;
}
template<typename T>
size_t DoublyLinkedList<T>::getSize() const
{
	return count;
}

template <typename T>
typename DoublyLinkedList<T>::DLinkedIterator DoublyLinkedList<T>::insertAfter(const T& element, const typename DoublyLinkedList<T>::DLinkedIterator& it)
{
	Node* newNode = new Node(element);
	Node* itNode = it.currentElementPtr;

	newNode->next = itNode->next;
	itNode->next = newNode;

	return typename DoublyLinkedList<T>::DLinkedIterator(newNode);
}


template <typename T>
typename DoublyLinkedList<T>::DLinkedIterator DoublyLinkedList<T>::remove(const typename DoublyLinkedList<T>::DLinkedIterator& it)
{
	Node* toDelete = it.currentElementPtr;

	if (toDelete->next == nullptr)
	{
		popBack();
		return end();
	}
	else if (toDelete->prev == nullptr)
	{
		popFront();
		return begin();
	}
	else
	{
		toDelete->prev->next = toDelete->next;
		Node* nextIt = toDelete->next->prev = toDelete->prev;
		delete[] toDelete;

		return typename DoublyLinkedList<T>::DLinkedIterator(nextIt);
	}
}

template <typename T>
DoublyLinkedList<T>::DoublyLinkedList(const DoublyLinkedList<T>& other) : head(nullptr), tail(nullptr)
{
	copyFrom(other);
}

template <typename T>
DoublyLinkedList<T>& DoublyLinkedList<T>::operator=(const DoublyLinkedList<T>& other)
{
	if (this != &other)
	{
		free();
		copyFrom(other);
	}
	return *this;
}

template <typename T>
DoublyLinkedList<T>::~DoublyLinkedList()
{
	free();
}

template <typename T>
void DoublyLinkedList<T>::copyFrom(const DoublyLinkedList<T>& other)
{
	Node* otherIter = other.head;
	while (otherIter != nullptr)
	{
		pushBack(otherIter->data);
		otherIter = otherIter->next;
	}
}

template<typename T>
void DoublyLinkedList<T>::free()
{
	Node* iter = head;
	while (iter != nullptr)
	{
		Node* toDelete = iter;
		iter = iter->next;
		delete toDelete;
	}
	
	head = tail = nullptr;
}


------------------------------------------------------------------------------------------------------------


#include <iostream>

template <typename T>
class LinkedStack
{
	struct Node
	{
		Node(const T& data)
		{
			this->data = data;
			next = nullptr;
		}
		T data;
		Node* next;
	};
	Node* head;

	void free();
	void copyFrom(const LinkedStack& other);
public:

	LinkedStack();
	LinkedStack(const LinkedStack& other);
	LinkedStack operator=(const LinkedStack& other);
	~LinkedStack();


	void push(const T&);  //O(1)
	void pop(); //O(1)
	const T& peek() const; // O(1)

	bool isEmpty() const;
};

template <typename T>
void LinkedStack<T>::free()
{
	Node* iter = head;
	while (iter != nullptr)
	{
		Node* prev = iter;
		iter = iter->next;
		delete prev;
	}
}

template <typename T>
void LinkedStack<T>::copyFrom(const LinkedStack& other)
{
	head = nullptr;
	if (other.isEmpty())
		return;

	Node* iterOther = other.head;

	head = new Node(iterOther->data);
	Node* iterThis = head;
	do
	{
		iterOther = iterOther->next;
		if (iterOther)
		{
			iterThis->next = new Node(iterOther->data);
			iterThis = iterThis->next;
		}
	} while (iterOther);

}

template <typename T>
LinkedStack<T>::LinkedStack()
{
	head = nullptr;
}

template <typename T>
LinkedStack<T>::LinkedStack(const LinkedStack& other)
{
	copyFrom(other);
}

template <typename T>
LinkedStack<T> LinkedStack<T>::operator=(const LinkedStack& other)
{
	if (this != &other)
	{
		free();
		copyFrom(other);
	}
	return *this;
}


template <typename T>
void LinkedStack<T>::push(const T& el)
{
	Node* newNode = new Node(el);
	if (isEmpty())
		head = newNode;
	else
	{
		newNode->next = head;
		head = newNode;
	}
}

template <typename T>
void LinkedStack<T>::pop()
{
	if (isEmpty())
		throw std::logic_error("The LinkedStack is empty");
	else if (head->next == nullptr) //only one element left
	{
		T el = head->data;
		delete head;
		head = nullptr;
	}
	else
	{
		T el = head->data;
		Node* temp = head->next;
		delete head;
		head = temp;
	}

}

template <typename T>
const T& LinkedStack<T>::peek() const
{	
	if(isEmpty())
		throw std::logic_error("The LinkedStack is empty");
	return head->data;
}

template <typename T>
bool LinkedStack<T>::isEmpty() const
{
	return head == nullptr;
}

template <typename T>
LinkedStack<T>::~LinkedStack()
{
	free();
}


------------------------------------------------------------------------------------------------------------



#include <iostream>

template <typename T>
class LinkedQueue
{
	struct Node
	{
		Node(T data)
		{
			this->data = data;
			next = nullptr;
		}
		T data;
		Node* next;
	};

	Node* head;
	Node* tail;

	void free();
	void copyFrom(const LinkedQueue& other);

public:
	LinkedQueue();
	LinkedQueue(const LinkedQueue& other);
	LinkedQueue operator=(const LinkedQueue& other);
	~LinkedQueue();

	void enqueue(const T&); // O(1)
	void dequeue(); //O(1)
	const T& peek() const; //O(1)

	bool isEmpty() const;

};

template <typename T>
void LinkedQueue<T>::free()
{
	Node* iter = head;
	while (iter!=nullptr)
	{
		Node* prev = iter;
		iter = iter->next;
		delete prev;
	}
	
	head = tail = nullptr;
}

template <typename T>
void LinkedQueue<T>::copyFrom(const LinkedQueue& other)
{
	Node* iter = other.head;
	while (iter != nullptr)
	{
		enqueue(iter->data);
		iter = iter->next;
	}
	
}

template <typename T>
LinkedQueue<T>::LinkedQueue()
{
	head = nullptr;
	tail = nullptr;
}

template <typename T>
LinkedQueue<T>::LinkedQueue(const LinkedQueue& other)
{
	copyFrom(other);
}

template <typename T>
LinkedQueue<T> LinkedQueue<T>::operator=(const LinkedQueue& other)
{
	if (this!=&other)
	{
		free();
		copyFrom(other);
	}
	return *this;
}

template <typename T>
void LinkedQueue<T>::enqueue(const T& el)
{
	Node* newNode = new Node(el);
	if (head == nullptr && tail == nullptr)//if its empty
	{
		head = newNode;
		tail = newNode;
	}
	else
	{
		tail->next = newNode;
		tail = newNode;
	}
}



template <typename T>
void LinkedQueue<T>::dequeue()
{
	if (isEmpty())
		throw std::runtime_error("The list is empty!");
	else if (head == tail)
	{
		T el = head->data;
		delete head;

		head = nullptr;
		tail = nullptr;
	}
	else
	{
		T el = head->data;
		Node* temp = head->next;
		
		delete head;
		head = temp;
	}

}
template <typename T>
const T& LinkedQueue<T>::peek() const
{
	if(isEmpty())
		throw std::runtime_error("The list is empty!");

	return head->data;
}

template <typename T>
bool LinkedQueue<T>::isEmpty() const
{
	return head == nullptr && tail == nullptr;
}

template <typename T>
LinkedQueue<T>::~LinkedQueue()
{
	free();
}


------------------------------------------------------------------------------------------------------------


#include <iostream>
using namespace std;

template <typename T>
class SinglyLinkedList
{
private:
	struct Node
	{
		T data;
		Node* next;

		Node(const T& data)
			: data(data), next(nullptr) {};
	};

	Node* head;
	Node* tail;

public:
	SinglyLinkedList();
	SinglyLinkedList(const SinglyLinkedList<T>& other);
	SinglyLinkedList<T>& operator=(const SinglyLinkedList<T>& other);
	~SinglyLinkedList();

private:
	void copyFrom(const SinglyLinkedList<T>& other);
	void free();

public:
	void pushFront(const T& el);
	void pushBack(const T& el);

	void popFront();

	const T& front() const;
	const T& back() const;

	template <typename U>
	friend SinglyLinkedList<U> concat(SinglyLinkedList<U>& lhs, SinglyLinkedList<U>& rhs);

	void print() const;
};

template <typename T>
void SinglyLinkedList<T>::pushFront(const T& el)
{
	Node* newNode = new Node(el);

	if (!head)
	{
		head = tail = newNode;
		return;
	}

	newNode->next = head;
	head = newNode;
}
template <typename T>
void SinglyLinkedList<T>::pushBack(const T& el)
{
	Node* newNode = new Node(el);

	if (!tail)
	{
		head = tail = newNode;
		return;
	}

	tail->next = newNode;
	tail = newNode;
}

template <typename T>
void SinglyLinkedList<T>::popFront()
{
	if (!head)
		throw length_error("Empty list!");

	if (head == tail)
	{
		delete head;
		head = tail = nullptr;
		return;
	}

	Node* toDelete = head;
	head = head->next;
	delete toDelete;
}

template <typename T>
const T& SinglyLinkedList<T>::front() const
{
	if (!head)
		throw length_error("Empty list!");

	return head->data;
}

template <typename T>
const T& SinglyLinkedList<T>::back() const 
{
	if (!tail)
		throw length_error("Empty list!");

	return tail->data;
}

template <typename T>
SinglyLinkedList<T> concat(SinglyLinkedList<T>& lhs, SinglyLinkedList<T>& rhs)
{
	SinglyLinkedList<T> result;

	if (!lhs.head)
	{
		result.head = rhs.head;
		result.tail = rhs.tail;
	}
	else if (!rhs.head)
	{
		result.head = lhs.head;
		result.tail = lhs.tail;
	}
	else
	{
		lhs.tail->next = rhs.head;
		result.head = lhs.head;
		result.tail = rhs.tail;
	}

	rhs.head = rhs.tail = lhs.head = lhs.tail = nullptr;

	return result;
}

template <typename T>
SinglyLinkedList<T>::SinglyLinkedList() : head(nullptr), tail(nullptr)
{}

template <typename T>
SinglyLinkedList<T>::SinglyLinkedList(const SinglyLinkedList<T>& other) : head(nullptr), tail(nullptr)
{
	copyFrom(other);
}
template <typename T>
SinglyLinkedList<T>& SinglyLinkedList<T>::operator=(const SinglyLinkedList<T>& other)
{
	if (this != &other)
	{
		free();
		copyFrom(other);
	}

	return *this;
}
template <typename T>
SinglyLinkedList<T>::~SinglyLinkedList()
{
	free();
}

template <typename T>
void SinglyLinkedList<T>::copyFrom(const SinglyLinkedList<T>& other)
{
	Node* iter = other.head;

	while (iter)
	{
		pushBack(iter->data);
		iter = iter->next;
	}
}

template <typename T>
void SinglyLinkedList<T>::free()
{
	Node* iter = head;

	while (iter)
	{
		Node* toDelete = iter;
		iter = iter->next;
		delete toDelete;
	}
	
	head = tail = nullptr;
}

template <typename T>
void SinglyLinkedList<T>::print() const
{
	Node* iter = head;

	while (iter)
	{
		cout << iter->data << ' ';
		if (iter->next)
			cout << "->" << ' ';
		iter = iter->next;
	}
}



------------------------------------------------------------------------------------------------------------




#include <iostream>

template <typename T>
class SinglyLinkedList
{
private:
	struct Node
	{
		T data;
		Node* next;

		Node(const T& data)
		{
			this->data = data;
			next = nullptr;
		}
	};

	Node* head;
	Node* tail;

public:
	SinglyLinkedList();
	SinglyLinkedList(const SinglyLinkedList<T>& other);
	SinglyLinkedList<T>& operator=(const SinglyLinkedList<T>& other);
	~SinglyLinkedList();

private:
	void copyFrom(const SinglyLinkedList<T>& other);
	void free();

public:
	void pushFront(const T& el);
	void pushBack(const T& el);

	void popFront();

	const T& front() const;
	const T& back() const;

	template <typename U>
	friend SinglyLinkedList<U> concat(SinglyLinkedList<U>& lhs, SinglyLinkedList<U>& rhs);

	void print() const;
	
	class SLinkedIterator
	{
		Node* currentElementPtr;

		friend class SinglyLinkedList;
	public:

		typedef std::forward_iterator_tag iterator_category;

		SLinkedIterator(Node* currentElementPtr = nullptr) : currentElementPtr(currentElementPtr) {}

		T& operator*()
		{
			return currentElementPtr->data;
		}

		T* operator->()
		{
			return &currentElementPtr->data;
		}

		SLinkedIterator& operator++()
		{
			if (currentElementPtr)
				currentElementPtr = currentElementPtr->next;
			return *this;
		}

		SLinkedIterator operator++(int)
		{
			SLinkedIterator copy(*this);
			++(*this);
			return copy;
		}

		SLinkedIterator& operator+=(size_t s)
		{

			while (s--)
				++(*this);

			return *this;
		}

		SLinkedIterator operator+(int i) const
		{

			SLinkedIterator res(*this);
			return res += i;
		}

		bool operator==(const SLinkedIterator& rhs) const { return currentElementPtr == rhs.currentElementPtr; }
		bool operator!=(const SLinkedIterator& rhs) const { return !(rhs == *this); }

	};
	SLinkedIterator begin()
	{
		return SLinkedIterator(head);
	}
	SLinkedIterator end()
	{
		return SLinkedIterator(nullptr);
	}

	SLinkedIterator insertAfter(const T& element, const SLinkedIterator& it);
	SLinkedIterator removeAfter(const SLinkedIterator& it);
};

template <typename T>
void SinglyLinkedList<T>::pushFront(const T& el)
{
	Node* newNode = new Node(el);

	if (!head)
	{
		head = tail = newNode;
		return;
	}

	newNode->next = head;
	head = newNode;
}
template <typename T>
void SinglyLinkedList<T>::pushBack(const T& el)
{
	Node* newNode = new Node(el);

	if (!tail)
	{
		head = tail = newNode;
		return;
	}

	tail->next = newNode;
	tail = newNode;
}

template <typename T>
void SinglyLinkedList<T>::popFront()
{
	if (!head)
		throw std::logic_error("Empty list!");

	if (head == tail)
	{
		delete head;
		head = tail = nullptr;
		return;
	}

	Node* toDelete = head;
	head = head->next;
	delete toDelete;
}

template <typename T>
const T& SinglyLinkedList<T>::front() const
{
	if (!head)
		throw std::logic_error("Empty list!");

	return head->data;
}

template <typename T>
const T& SinglyLinkedList<T>::back() const 
{
	if (!tail)
		throw std::logic_error("Empty list!");

	return tail->data;
}

template <typename T>
SinglyLinkedList<T> concat(SinglyLinkedList<T>& lhs, SinglyLinkedList<T>& rhs)
{
	SinglyLinkedList<T> result;

	if (!lhs.head)
	{
		result.head = rhs.head;
		result.tail = rhs.tail;
	}
	else if (!rhs.head)
	{
		result.head = lhs.head;
		result.tail = lhs.tail;
	}
	else
	{
		lhs.tail->next = rhs.head;
		result.head = lhs.head;
		result.tail = rhs.tail;
	}

	rhs.head = rhs.tail = lhs.head = lhs.tail = nullptr;

	return result;
}

template <typename T>
typename SinglyLinkedList<T>::SLinkedIterator SinglyLinkedList<T>::insertAfter(const T& element, const typename SinglyLinkedList<T>::SLinkedIterator& it)
{
	Node* newNode = new Node(element);
	Node* itNode = it.currentElementPtr;

	newNode->next = itNode->next;
	itNode->next = newNode;

	return SinglyLinkedList<T>::SLinkedIterator(newNode);
}


template <typename T>
typename SinglyLinkedList<T>::SLinkedIterator SinglyLinkedList<T>::removeAfter(const typename SinglyLinkedList<T>::SLinkedIterator& it)
{
	Node* toDelete = (it + 1).currentElementPtr;

	Node* newNext = toDelete == nullptr ? nullptr : toDelete->next;

	it.currentElementPtr->next = newNext;
	return SinglyLinkedList<T>::SLinkedIterator(newNext);

}

template <typename T>
SinglyLinkedList<T>::SinglyLinkedList() : head(nullptr), tail(nullptr)
{}

template <typename T>
SinglyLinkedList<T>::SinglyLinkedList(const SinglyLinkedList<T>& other) : head(nullptr), tail(nullptr)
{
	copyFrom(other);
}

template <typename T>
SinglyLinkedList<T>& SinglyLinkedList<T>::operator=(const SinglyLinkedList<T>& other)
{
	if (this != &other)
	{
		free();
		copyFrom(other);
	}

	return *this;
}
template <typename T>
SinglyLinkedList<T>::~SinglyLinkedList()
{
	free();
}

template <typename T>
void SinglyLinkedList<T>::copyFrom(const SinglyLinkedList<T>& other)
{
	Node* iter = other.head;

	while (iter)
	{
		pushBack(iter->data);
		iter = iter->next;
	}
}

template <typename T>
void SinglyLinkedList<T>::free()
{
	Node* iter = head;

	while (iter)
	{
		Node* toDelete = iter;
		iter = iter->next;
		delete toDelete;
	}
	head = tail = nullptr;
}

template <typename T>
void SinglyLinkedList<T>::print() const
{
	Node* iter = head;

	while (iter)
	{
		std::cout << iter->data << ' ';
		if (iter->next)
			std::cout << "->" << ' ';
		iter = iter->next;
	}

	std::cout << std::endl;
}




------------------------------------------------------------------------------------------------------------




#include <iostream>
using namespace std;

struct Node
{
    Node* next = nullptr;
    int data;
    
    Node(int data, Node* next = nullptr) : data(data), next(next){}
};

void print(const Node* root)
{
    while(root)
    {
        std::cout << root->data << " ";
        root = root->next;
    }
    std::cout << std::endl;
}

void freeList(Node* root)
{
    Node* current = root;
    while(current)
    {
        Node* next = current->next;
        delete current;
        current = next;
    }
}

Node* mergeLists(Node* firstIter, Node* secondIter)
{
    if(firstIter == nullptr)
        return secondIter;
    if(secondIter == nullptr)
        return firstIter;
        
    Node* resultRoot;
    Node* resultIter;
    
    if(firstIter->data < secondIter->data)
    {
        resultRoot = firstIter;
        resultIter = firstIter;
        firstIter = firstIter->next;
    }   
    else
    {
        resultRoot = secondIter;
        resultIter = secondIter;
        secondIter = secondIter->next;
    }
    
    while(firstIter && secondIter)
    {
        if(firstIter->data <= secondIter->data)
        {
            resultIter->next = firstIter;
            firstIter = firstIter->next;
        }
        else
        {
            resultIter->next = secondIter;
            secondIter = secondIter->next;
        }
        resultIter = resultIter->next;
    }
    
    resultIter->next = firstIter ? firstIter : secondIter;
    return resultRoot;
}

Node* getMid(Node* list)
{
    Node* slow = list;
    Node* fast = list ->next;
    
    while(fast && fast->next)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

Node* mergeSort(Node* list)
{
    
    if(!list || !list->next) 
        return list;
        
    Node* mid = getMid(list);

        
    Node* left = list;
    Node* right = mid->next;
    mid->next = nullptr;
    
    left = mergeSort(left);
    right = mergeSort(right);
    
    return mergeLists(left, right);
}


int main()
{
    Node* list = new Node(20, new Node(14, new Node(7)));
    list = mergeSort(list);
    print(list);
    freeList(list);
    list = nullptr;
}




